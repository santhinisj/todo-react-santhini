npm init
npm i webpack --save-dev
mkdir -p src/js
touch src/js/app.js

npm install webpack-cli -D
#run webpack.js
./node_modules/webpack/bin/webpack.js .src/js/app.js --output-filename ./dist/app.bundle.js
vi webpack.config.js

#add these
const path = require('path');

// Constant with our paths
const paths = {
  DIST: path.resolve(__dirname, 'dist'),
  JS: path.resolve(__dirname, 'src/js'),
};

// Webpack configuration
module.exports = {
  entry: path.join(paths.JS, 'app.js'),
  output: {
    path: paths.DIST,
    filename: 'app.bundle.js'
  },
};

#add these in package.json
"scripts": {
    "build": "webpack"
}

#then
npm run build

npm i webpack-dev-server --save-dev

#add to package.json
#inside scripts:
"dev": "webpack-dev-server"

#server is running on localhost:8080

#create index.html in src
#update webpack.config.js
//inside paths
SRC: path.resolve(__dirname, 'src')

//inside module.exports
devServer: {
    contentBase: paths.SRC,
}

#restart server and reload localhost page
#now to inject javaScript we'll use html-webpack-plugin
npm i html-webpack-plugin --save-dev

#update webpack.config.js
//require html plugin
const HtmlWebpackPlugin = require('html-webpack-plugin')

#disable devServer now, inside exports and add plugins:
#now webpack will this page to inject its bundled app.
plugins: [
    new HtmlWebpackPlugin({
        template: path.join(paths.SRC, 'index.html')
    })
]

#restart the server

**************Webpack complete****************

***************Babel*******************

#Babel core package
#Babel webpack loader
#Bab3l env preset
#Babel React preset

#converts modern JS code into older ones
npm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react

#add these in webpack.config.js
//inside module.exports
module: {
    rules: [
        {
            test: /\.(js|jsx)$/,
            exclude: /node_modules/,
            use: [
                'babel-loader',
            ]
        }
    ]
}
//and
resolve: {
    extenstions: ['.js', '.jsx']
}

#restart server

****************Babel-end****************
***************React****************

npm i react react-dom --save

#add one division with some id to render reactdom there
#start adding codes in app.js for React

*****************React-end******************
****************CSS*****************

npm i css-loader extract-text-webpack-plugin/@next --save-dev

#update webpack.config for css-loader
//inside module/rules:
{
    test: /\.css$/,
    loader: ExtractTextPlugin.extract({
        use:'css-loader',
    })
}

